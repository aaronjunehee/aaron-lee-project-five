{"version":3,"sources":["images/cactus.png","components/Nav.js","components/Header.js","firebase.js","components/GifFinder.js","components/Form.js","components/UserComment.js","components/App.js","serviceWorker.js","index.js"],"names":["module","exports","Nav","moveToMain","scroller","scrollTo","duration","delay","smooth","moveToComments","onClick","this","Component","Header","moveToSection","className","src","cactus","alt","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","GifFinder","props","getGifs","search","axios","method","url","dataResponse","params","api_key","q","then","results","data","setState","gifs","isLoading","console","log","state","handleChange","event","target","value","handleClick","gifUrl","gifParentCallback","activeItemUrl","handleSubmit","preventDefault","emptySearch","_handleKeyDown","e","key","toggle","onChange","name","type","onKeyDown","map","gifItem","images","fixed_width","id","fixed_height","Form","toggleGifModal","inputLinkClicked","gifCallbackFunction","selectedGif","plantComment","killCount","alert","database","ref","push","comment","count","gif","incrementCount","gifElement","React","createRef","placeholder","UserComment","prop","message","numOfKills","App","userComments","on","response","comments","val","newState","content","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.5f741d08.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/cactus.9c6adf90.png\";","import React, { Component } from 'react';\nimport { Link, Element, Events, animateScroll as scroll, scrollSpy, scroller } from 'react-scroll';\n\n\nclass Nav extends Component {\n\n    moveToMain = () => {\n        scroller.scrollTo('form', {\n            duration: 1000,\n            delay: 100,\n            smooth: \"easeInOutQuint\",\n        });\n    }\n\n    moveToComments = () => {\n        scroller.scrollTo('comments', {\n            duration: 1000,\n            delay: 100,\n            smooth: \"easeInOutQuint\",\n        });\n    }\n\n    render() {\n        return (\n            <nav>\n                <h1>Houseplant-Killer Confessions</h1>\n                <ol>\n                    <li onClick={this.moveToMain}\n                    >Share your botanical guilt</li>\n                    <li onClick={this.moveToComments}>Read comments</li>\n                </ol>\n            </nav>\n        )\n    }\n}\n\n\nexport default Nav;","import React, { Component } from 'react';\nimport { Link, Element, Events, animateScroll as scroll, scrollSpy, scroller } from 'react-scroll';\nimport cactus from '../images/cactus.png';\n\n\n\n\nclass Header extends Component {\n\n    moveToSection = () => {\n        scroller.scrollTo('form', {\n            duration: 1000,\n            delay: 100,\n            smooth: \"easeInOutQuint\",\n        });\n    }\n\n    render(){\n        return (\n            <header>\n                <div className=\"wrapper\">\n                    <div className=\"headerFlexContainer\">\n                        <div className=\"titleContainer\">\n                            <h2>A safe space for<span className=\"lineBreak\">indoor plant</span></h2>\n                            <h3>serial killers...</h3>\n                            <button\n                                className='mainButton'\n                                onClick={this.moveToSection}>Make a Confession\n                            </button>\n                        </div>\n                        <div className=\"cactusImageContainer\">\n                            <img src={cactus} alt=\"A part of a plant hanging down from the top right corner of the window\"/>\n                        </div>\n                    </div>\n                </div>\n            </header>\n        )\n    }\n}\n\n\nexport default Header;","import firebase from 'firebase';\n\n\nconst firebaseConfig = {\n    apiKey: \"AIzaSyB7tSQApiqYApmhpKCV8IHcQrL-pvz0IcQ\",\n    authDomain: \"aaron-lee-project-five-27bc6.firebaseapp.com\",\n    databaseURL: \"https://aaron-lee-project-five-27bc6.firebaseio.com\",\n    projectId: \"aaron-lee-project-five-27bc6\",\n    storageBucket: \"\",\n    messagingSenderId: \"128657166746\",\n    appId: \"1:128657166746:web:cb9b98bcb9d2b680b62a23\"\n};\n\nfirebase.initializeApp(firebaseConfig);\n\n\nexport default firebase;","import React, { Component } from 'react';\nimport axios from 'axios';\n\n    \nclass GifFinder extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            gifs: [],\n            search: '',\n            // selectedGif: false,\n            activeItemUrl: null,\n            isLoading: true,\n        };\n        \n    }\n\n    getGifs = (search) => {\n        // making an AJAX request\n        axios({\n            method:'GET',\n            url: 'https://api.giphy.com/v1/gifs/search',\n            dataResponse: 'json',\n                params: {\n                    api_key: 'eCFQf1KPHJ1iP8TV7VEGUhOfyupAxC83',\n                    q: search\n                }\n        }).then(results => {\n            results = results.data.data\n            this.setState({\n                gifs: results,\n                isLoading: false,\n            })\n            console.log(this.state.gifs);\n        })\n    }\n\n    handleChange = (event) => {\n        this.setState({\n            search: event.target.value\n        })\n        console.log(this.state.search);\n    }\n\n\n    handleClick = (gifUrl) => {\n        this.props.gifParentCallback(gifUrl);\n        // this.toggleGif(gifUrl);\n        this.setState({\n            activeItemUrl: gifUrl\n        })\n    }\n\n    handleSubmit = (event) => {\n        event.preventDefault();\n        this.getGifs(this.state.search);\n    }\n\n    emptySearch = () => {\n        this.setState({\n            search: '',\n        })\n    }\n\n    _handleKeyDown = (e) => {\n        if (e.key === 'Enter') {\n            console.log(this.state.search);\n            this.getGifs(this.state.search);\n        }\n    }\n\n    render() {\n        const { activeItemUrl } = this.state;\n        // const selectionVis = activeItemUrl === gifItem.images.fixed_width.url ? 'show' : 'hide';\n        return (\n            <div className=\"gifModalBackground\">\n\n                <div className=\"gifModalContainer\">\n                    <form className=\"gifModalNav\">\n                        <i \n                            className=\"fas fa-times close\" \n                            onClick={this.props.toggle}>\n                        </i>\n                        <input\n                            onChange={this.handleChange}\n                            name=\"searchGifs\"\n                            value={this.state.search} \n                            type=\"text\"\n                            onKeyDown={this._handleKeyDown} \n                        />\n                        <button onClick={this.handleSubmit}>Find Gif's!</button>\n                    </form>\n                    <div className=\"gifResults\">\n                        {/* {this.state.gifs ? (this.state.gifs.map(gifItem => {\n                            return (\n                                <div \n                                    className={activeItemUrl === gifItem.images.fixed_width.url ? 'show' : 'hide'}\n                                key={gifItem.id}\n                                onClick={() => this.handleClick(gifItem.images.fixed_width.url)}>\n                                    <img src={gifItem.images.fixed_height.url} />\n                                </div>\n                            )\n                        })) : (<p>...Loading</p>)} */}\n\n                        {this.state.isLoading ? (<p>Search for a gif!</p>):(\n                            this.state.gifs.map(gifItem => {\n                            return (\n                                <div\n                            className={activeItemUrl === gifItem.images.fixed_width.url ? 'show' : 'hide'}\n                            key={gifItem.id}\n                            onClick={() => this.handleClick(gifItem.images.fixed_width.url)}>\n                            <img src={gifItem.images.fixed_height.url} />\n                        </div>\n                            );\n                        }))}\n\n\n\n\n\n                    \n\n\n                    </div>\n                </div>   \n            </div>\n        );\n    }\n}\n\nexport default GifFinder;","import React, { Component } from 'react'; \nimport firebase from '../firebase';\nimport GifFinder from './GifFinder';\nimport { Link, Element, Events, animateScroll as scroll, scrollSpy, scroller } from 'react-scroll';\n\nclass Form extends Component {\n    constructor(){\n        super();\n\n        this.state = {\n            plantComment: '',\n            killCount: 0,\n            selectedGif: '',\n            inputLinkClicked: false\n        };\n\n        this.gifElement = React.createRef();\n    }\n\n    toggleGifModal = (event) => {\n        event.preventDefault();\n        this.setState({\n            inputLinkClicked: !this.state.inputLinkClicked\n        })\n    }\n\n    gifCallbackFunction = (gifUrl) => {\n        this.setState({\n            selectedGif: gifUrl\n        })\n    }\n    \n    handleChange = (event) => {\n        this.setState({\n            [event.target.name]: event.target.value\n        })\n    }\n\n\n    handleSubmit = (event) => {\n        event.preventDefault();\n        if (this.state.plantComment === \"\" || this.state.killCount === 0 || this.state.selectedGif === \"\") {\n            alert(\"Fill out the form you murderer!\")\n        } else {\n            const dbRef = firebase.database().ref();\n            dbRef.push({\n                comment: this.state.plantComment,\n                count: this.state.killCount,\n                gif: this.state.selectedGif,\n            });\n            this.setState({ plantComment: \"\", killCount: 0 });\n            this.moveToSection();\n            this.setState({ selectedGif: '' });\n        }\n        \n        \n        // this.gifElement.current.emptySearch();\n    }\n\n    incrementCount = (event) => {\n        event.preventDefault();\n        this.setState({\n            killCount: this.state.killCount + 1,\n        })\n    }\n\n    moveToSection = () => {\n        scroller.scrollTo('comments', {\n            duration: 1000,\n            delay: 100,\n            smooth: \"easeInOutQuint\",\n        });\n        \n    }\n    \n    render() {\n        const { selectedGif } = this.state\n        return (\n            <div className=\"wrapper\">\n                <div className=\"formContainer\">\n                    <h4>Write the dirt here.</h4>\n                    <div className=\"gifPreviewContainer\">\n                        <p className=\"gifPreviewTitle\">gif preview</p>\n                        <div className=\"selectedGifContainer\">\n                            <img src={selectedGif} />\n                        </div>   \n                    </div>\n                \t<form>\n                        <label className=\"visuallyHidden\">Write your message here</label>\n                        <input \n                            onChange={this.handleChange}\n                            name=\"plantComment\"\n                            type=\"text\"\n                            value={this.state.plantComment}\n                            placeholder=\"Enter message here\"\n                            className=\"messageInput\"\n                        />\n                        <button onClick={this.toggleGifModal} className='gifModal'>Find a Gif</button>\n\n                \t        {\n                \t            this.state.inputLinkClicked && \n                \n                \t            <GifFinder \n                \t            toggle={this.toggleGifModal}\n                \t            gifParentCallback={this.gifCallbackFunction} \n                \t            ref={this.gifElement} />\n                \t        }        \n\n                        <button onClick={this.incrementCount} className=\"killCount\">\n                            # of Kills <span className=\"killCount\">x{this.state.killCount}</span>\n                        </button>\n                        \n                        <button onClick={this.handleSubmit} className=\"submit\">Submit</button>        \n                \t</form>\n                </div> \n            </div>\n        );\n    }\n}\n\n\nexport default Form;","import React from 'react';\n\nconst UserComment = (prop) => {\n    return (\n        <li className=\"userComment\">\n            <div className=\"userCommentGif\">\n                <img src={prop.gif} />\n            </div>\n            <h4>{prop.message}</h4>\n            <p className=\"deathCount\">🥀x{prop.numOfKills}</p>\n        </li>\n    )\n}\n\nexport default UserComment;","import React, { Component } from 'react';\nimport Nav from './Nav';\nimport Header from './Header';\nimport Form from './Form';\nimport UserComment from './UserComment';\nimport firebase from '../firebase';\nimport '../styles/App.scss';\n\nclass App extends Component {\n  constructor() {\n    super();\n\n    this.state = {\n      userComments: [],\n    };\n  }\n  \n  componentDidMount() {\n    const dbRef = firebase.database().ref();\n\n    dbRef.on('value', (response) => {\n      const comments = response.val();\n      \n      const newState = [];\n\n      for (let key in comments){\n        newState.push({\n          key: key, \n          content: comments[key]\n        });\n      }\n      this.setState({\n        userComments: newState,\n      })\n    })\n\n  }\n  \n  \n  render() {\n    return (\n      <div>\n        <Nav />\n        <Header />\n        <main>\n          <section className=\"formSection\" name=\"form\">\n            <Form />\n          </section>\n          <section className=\"commentSection\" name=\"comments\">\n            <div className=\"wrapper\">\n              <ul className=\"userCommentsContainer\">\n                {this.state.userComments.map(userComments => {\n                  return ( \n                    <UserComment \n                      key={userComments.key}\n                      message={userComments.content.comment}\n                      numOfKills={userComments.content.count}\n                      gif={userComments.content.gif}\n                    />\n                  );\n                })}\n              </ul>\n            </div>\n          </section>\n        </main>\n        {/* add a footer here */}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}