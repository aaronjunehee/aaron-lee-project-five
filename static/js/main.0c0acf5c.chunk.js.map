{"version":3,"sources":["images/virus.svg","images/down_chevron.svg","images/leaf.svg","images/gifIcon.svg","components/Nav.js","components/Header.js","firebase.js","components/GifFinder.js","components/Form.js","components/UserComment.js","components/App.js","serviceWorker.js","index.js"],"names":["module","exports","Nav","className","src","virus","Component","Header","class","href","down_chevron","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","GifFinder","props","getGifs","search","axios","method","url","dataResponse","params","api_key","q","then","results","data","setState","gifs","console","log","state","handleChange","event","target","value","handleClick","gifUrl","gifParentCallback","handleSubmit","preventDefault","emptySearch","this","onClick","toggle","onChange","name","type","map","gifItem","key","id","images","fixed_width","fixed_height","Form","toggleGifModal","inputLinkClicked","gifCallbackFunction","selectedGif","database","ref","push","comment","plantComment","count","killCount","gif","moveToSection","incrementCount","scroller","scrollTo","gifElement","React","createRef","leaf","rows","cols","placeholder","gifIcon","UserComment","prop","message","numOfKills","App","userComments","on","response","comments","val","newState","content","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.0c0acf5c.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/virus.26bbd3ea.svg\";","module.exports = __webpack_public_path__ + \"static/media/down_chevron.4ce7369f.svg\";","module.exports = __webpack_public_path__ + \"static/media/leaf.ea9c3940.svg\";","module.exports = __webpack_public_path__ + \"static/media/gifIcon.d4e448f3.svg\";","import React, { Component } from 'react';\nimport virus from '../images/virus.svg';\n\n\nclass Nav extends Component {\n    render() {\n        return (\n            <nav>\n                <div className=\"skull\">\n                    <img src={virus} />\n                </div>\n                <h1>Houseplant-Killer <span className=\"lineBreak\">Confessions</span></h1>\n            </nav>\n        )\n    }\n}\n\n\nexport default Nav;","import React, { Component } from 'react';\nimport down_chevron from '../images/down_chevron.svg'\n\n\nclass Header extends Component {\n    render(){\n        return (\n            <header>\n                <div class=\"intro\">\n                    <h2>A Safe Space</h2>\n                    <h3>for <span class=\"highlight\">indoor plant serial killers.</span></h3>\n                </div>\n                <div class='chevron'>\n                    <a href=\"#main\"><img src={down_chevron} /></a>\n                </div>\n               \n            </header>\n        )\n    }\n}\n\n\nexport default Header;","import firebase from 'firebase';\n\n\nconst firebaseConfig = {\n    apiKey: \"AIzaSyB7tSQApiqYApmhpKCV8IHcQrL-pvz0IcQ\",\n    authDomain: \"aaron-lee-project-five-27bc6.firebaseapp.com\",\n    databaseURL: \"https://aaron-lee-project-five-27bc6.firebaseio.com\",\n    projectId: \"aaron-lee-project-five-27bc6\",\n    storageBucket: \"\",\n    messagingSenderId: \"128657166746\",\n    appId: \"1:128657166746:web:cb9b98bcb9d2b680b62a23\"\n};\n\nfirebase.initializeApp(firebaseConfig);\n\n\nexport default firebase;","import React, { Component } from 'react';\nimport axios from 'axios';\n\n    \nclass GifFinder extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            gifs: [],\n            search: '',\n        };\n    }\n\n    getGifs = (search) => {\n        axios({\n            method:'GET',\n            url: 'https://api.giphy.com/v1/gifs/search',\n            dataResponse: 'json',\n                params: {\n                    api_key: 'eCFQf1KPHJ1iP8TV7VEGUhOfyupAxC83',\n                    q: search\n                }\n        }).then(results => {\n            results = results.data.data\n            this.setState({\n                gifs: results\n            })\n            console.log(this.state.gifs);\n        })\n    }\n\n    handleChange = (event) => {\n        this.setState({\n            search: event.target.value\n        })\n        console.log(this.state.search);\n    }\n\n\n    handleClick = (gifUrl) => {\n        console.log(gifUrl);\n        this.props.gifParentCallback(gifUrl);\n    }\n\n    handleSubmit = (event) => {\n        event.preventDefault();\n        this.getGifs(this.state.search);\n    }\n\n    emptySearch = () => {\n        this.setState({\n            search: '',\n        })\n    }\n\n    render() {\n        return (\n            <div className=\"popUp\">\n                {console.log(this.props)}\n                <div className=\"gifContainer\">\n                    <div className=\"gifNav\">\n                        <i class=\"fas fa-times close\" onClick={this.props.toggle}></i>\n                        <input\n                            onChange={this.handleChange}\n                            name=\"searchGifs\"\n                            value={this.state.search} \n                            type=\"text\" \n                        />\n                        <button onClick={this.handleSubmit}>Find Gif's!</button>\n                    </div>\n                    <div className=\"gifResults clearfix\">\n                        {this.state.search ? (this.state.gifs.map(gifItem => {\n                            return (\n                                <div className='gifItem' key={gifItem.id} onClick={() => this.handleClick(gifItem.images.fixed_width.url)}>\n                                    <img src={gifItem.images.fixed_height.url} />\n                                </div>\n                            )\n                        })) : (<p></p>)}\n                    </div>\n                </div>\n                \n            </div>\n        );\n    }\n}\n\nexport default GifFinder;","import React, { Component } from 'react'; \nimport firebase from '../firebase';\nimport GifFinder from './GifFinder';\nimport leaf from '../images/leaf.svg';\nimport gifIcon from '../images/gifIcon.svg';\nimport * as Scroll from 'react-scroll';\nimport { Link, Element, Events, animateScroll as scroll, scrollSpy, scroller } from 'react-scroll';\n\nclass Form extends Component {\n    constructor(){\n        super();\n\n        this.state = {\n            plantComment: '',\n            killCount: 0,\n            selectedGif: '',\n            inputLinkClicked: false\n        };\n\n        this.gifElement = React.createRef();\n    }\n\n    toggleGifModal = (event) => {\n        event.preventDefault();\n        this.setState({\n            inputLinkClicked: !this.state.inputLinkClicked\n        })\n    }\n\n    gifCallbackFunction = (gifUrl) => {\n        this.setState({\n            selectedGif: gifUrl\n        })\n    }\n    \n    handleChange = (event) => {\n        this.setState({\n            [event.target.name]: event.target.value\n        })\n    }\n\n\n    handleSubmit = (event) => {\n        event.preventDefault();\n        const dbRef = firebase.database().ref();\n        dbRef.push({\n            comment: this.state.plantComment,\n            count: this.state.killCount,\n            gif: this.state.selectedGif,\n        });\n        this.setState({ plantComment: \"\", killCount: 0 });\n        this.moveToSection();\n        \n        // this.gifElement.current.emptySearch();\n    }\n\n    incrementCount = (event) => {\n        event.preventDefault();\n        this.setState({\n            killCount: this.state.killCount + 1,\n        })\n    }\n\n    moveToSection = () => {\n        scroller.scrollTo('test');\n        console.log(\"hello\");\n        \n    }\n    \n    render() {\n        return (\n            <form>\n                <div className=\"flexContainer top\">\n                    <label className=\"visuallyHidden\">Confession:</label>\n                    <div className=\"userIcon\">\n                        <img src={leaf} />\n                    </div>\n                    <textarea \n                        rows='3'\n                        cols='10'\n                        onChange={this.handleChange}\n                        name=\"plantComment\"\n                        type=\"text\"\n                        value={this.state.plantComment}\n                        placeholder=\"write a confession\"\n                        className=\"confessionInput\"\n                    ></textarea>\n                </div>\n               \n\n                <div className=\"flexContainer bottom\">\n                    <button onClick={this.toggleGifModal} className='gifIcon'>\n                        <img src={gifIcon} />\n                    </button>\n                    {\n                        this.state.inputLinkClicked && \n\n                        <GifFinder \n                        toggle={this.toggleGifModal}\n                        gifParentCallback={this.gifCallbackFunction} ref={this.gifElement} />\n\n                    }\n                    \n                    \n                    \n\n                    <div className=\"bottomRight\">\n                        <p className=\"killCount\">🥀x{this.state.killCount}</p>\n                        <button onClick={this.incrementCount} className=\"increment\">Number of Kills</button>\n\n                        <button onClick={this.handleSubmit}  className=\"submit\">Submit</button>\n\n                    </div>\n                </div>\n            </form>\n        );\n    }\n}\n\n\nexport default Form;","import React from 'react';\n\nconst UserComment = (prop) => {\n    return (\n        <li className=\"userComment\">\n            <div className=\"userCommentGif\">\n                <img src={prop.gif} />\n            </div>\n            <h4>{prop.message}</h4>\n            <p class=\"deathCount\">🥀x{prop.numOfKills}</p>\n        </li>\n    )\n}\n\nexport default UserComment;","import React, { Component } from 'react';\nimport Nav from './Nav';\nimport Header from './Header';\nimport Form from './Form';\nimport UserComment from './UserComment';\nimport firebase from '../firebase';\nimport '../styles/App.scss';\n\nclass App extends Component {\n  constructor() {\n    super();\n\n    this.state = {\n      userComments: [],\n    };\n  }\n  \n  componentDidMount() {\n    const dbRef = firebase.database().ref();\n\n    dbRef.on('value', (response) => {\n      const comments = response.val();\n      console.log(comments);\n      \n      const newState = [];\n      console.log(newState);\n\n      for (let key in comments){\n        newState.push({\n          key: key, \n          content: comments[key]\n        });\n      }\n      this.setState({\n        userComments: newState,\n      })\n    })\n\n  }\n  \n  \n  render() {\n    return (\n      <div>\n        <Nav />\n        <div className=\"wrapper\">\n          <Header />\n          <main id=\"main\">\n            <section className=\"formSection\">\n              <Form />\n            </section>\n            <section name=\"test\" class=\"userComments\">\n              <ul className=\"userCommentContainer\">\n                {this.state.userComments.map(userComments => {\n                  return ( \n                    <UserComment \n                      key={userComments.key}\n                      message={userComments.content.comment}\n                      numOfKills={userComments.content.count}\n                      gif={userComments.content.gif}\n                    />\n                  );\n                })}\n              </ul>\n            </section>\n          </main>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}